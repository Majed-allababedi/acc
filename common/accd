#!/system/bin/sh
# Advanced Charging Controller Daemon (accd)
# Copyright (C) 2017-2019, VR25 @ xda-developers
# License: GPL V3+


main() {

  umask 000
  set -euo pipefail

  modId=acc
  resetUnplugged=false
  lockFile=/dev/$modId/running
  config=/data/media/0/$modId/config.txt

  modPath=/system/etc/$modId
  [ -e $modPath/module.prop ] || modPath=/sbin/.core/img/$modId
  [ -e $modPath/module.prop ] || modPath=/sbin/.magisk/img/$modId
  log=${config%/*}/logs/acc-daemon-$(getprop ro.product.device | grep .. || getprop ro.build.product).log

  # wait until data is decrypted
  until [ -e /data/media/0/Android ]; do
    sleep 10
  done

  # make sure the number of running accd processes is at most one
  sh $modPath/system/*bin/acc -D stop 1>/dev/null

  mkdir -p ${lockFile%/*} ${config%/*}/logs
  [ -f $config ] || cp $modPath/default_config.txt $config
  echo $$ >$lockFile
  cd /sys/class/power_supply/

  # diagnostics and cleanup
  echo "###$(date)###" >>$log
  exec 1>>$log 2>&1
  { grep -q beta $modPath/module.prop || eval $(get_value verbose); } && set -x || :
  trap debug_exit EXIT

  [ -e $modPath ] || exit 1
  unset modId
  on_boot
  check_compatibility
  ctrl_charging
}


debug_exit() {
  local exitCode=$?
  echo -e "\n***EXIT $exitCode***\n"
  set +euxo pipefail
  getprop | grep -Ei 'product|version'
  echo
  set
  echo
  echo "SELinux status: $(getenforce 2>/dev/null || sestatus 2>/dev/null)" \
    | sed 's/En/en/;s/Pe/pe/'
  enable_charging
  rm $lockFile 2>/dev/null
  exit $exitCode
}


get_value() { sed -n "s:^$1=::p" $config | sed 's/#.*//'; }


is_charging() {
  local l="" t="" v=""
  local is_charging=true

  grep -Eiq 'dis|not' ./?attery/status && is_charging=false

  if $is_charging; then
    resetUnplugged=true
    for l in $(get_value onPlugged); do
      t=$(echo $l | cut -d: -f1)
      v=$(echo $l | cut -d: -f2)
      [ -e $t ] && ! grep -q $v $t && chmod +w $t && echo $v >$t || :
    done
  else
    if $resetUnplugged && eval $(get_value resetUnplugged); then
      dumpsys batterystats --reset 1>/dev/null 2>&1 || :
      rm /data/system/batterystats* 2>/dev/null || :
      resetUnplugged=false
    fi
  fi

  [ $(du -m $log | awk '{print $1}') -gt $(get_value maxLogSize) ] \
    && cp -f $log $log.old && : >$log || :

  $is_charging && return 0 || return 1
}


disable_charging() {
  local s="" off=""
  if is_charging; then
    if get_value switch | grep -q /; then
      s=$(get_value switch | awk '{print $1}')
      off=$(get_value switch | awk '{print $3}')
      if [ -e $s ]; then
        chmod +w $s && echo $off >$s || :
      else
        exit 1
      fi
    else
      switch_loop off
    fi
  fi
  # cool down
  [ $(cat ./?attery/temp 2>/dev/null || cat ./?attery/batt_temp) -ge $(get_value temp | cut -d- -f2 | cut -d_ -f1) ] \
    && sleep $(get_value temp | cut -d- -f2 | cut -d_ -f2) || :
}


enable_charging() {
  local s="" on=""
  if ! is_charging; then
    if get_value switch | grep -q /; then
      s=$(get_value switch | awk '{print $1}')
      on=$(get_value switch | awk '{print $2}')
      if [ -e $s ]; then
        chmod +w $s && echo $on >$s || :
      else
        exit 1
      fi
    else
      switch_loop on
    fi
  fi
}


ctrl_charging() {
  local c=0 s=""
  while [ -f $lockFile ]; do

    if is_charging; then
      # disable charging & clear battery stats if conditions apply
      if [ $(cat ./?attery/temp 2>/dev/null || cat battery/batt_temp) -ge $(get_value temp | cut -d- -f2 | cut -d_ -f1) ] \
        || [ $(cat ./?attery/capacity) -ge $(get_value capacity | cut -d, -f3 | cut -d- -f2) ]
      then
        disable_charging
        dumpsys batterystats --reset 1>/dev/null 2>&1 || :
        rm /data/system/batterystats* 2>/dev/null || :
      fi

    else
      # enable charging if conditions apply
      if [ $(cat ./?attery/capacity) -le $(get_value capacity | cut -d, -f3 | cut -d- -f1) ] \
        && [ $(cat ./?attery/temp 2>/dev/null || cat battery/batt_temp) -lt $(get_value temp | cut -d- -f2 | cut -d_ -f1) ]
      then
        enable_charging
      fi
    fi

    sleep $(get_value loopDelay)
  done
}


check_compatibility() {
  local s="" compatible=false
  if ! get_value switch | grep -q /; then
    while read s; do
      if [ -e $(echo $s | awk '{print $1}') ]; then
        compatible=true
        break
      fi
    done <<SWITCHES
$(grep -Ev '#|^$' $modPath/switches.txt)
SWITCHES
  else
    [ -e $(get_value switch | awk '{print $1}') ] && compatible=true
  fi
  $compatible || exit 1
  unset -f check_compatibility
}


# apply onBoot settings
on_boot() {
  local l="" t="" v=""
  for l in $(get_value onBoot); do
    t=$(echo $l | cut -d: -f1)
    v=$(echo $l | cut -d: -f2)
    [ -e $t ] && chmod +w $t && echo $v >$t || :
  done
  eval $(get_value onBootExit) && exit 0 || :
  unset -f on_boot
}


switch_loop() {
  local s="" on="" off="" default=""
  while read s; do
    if [ -e $(echo $s | awk '{print $1}') ]; then
      on=$(echo $s | awk '{print $2}')
      off=$(echo $s | awk '{print $3}')
      s=$(echo $s | awk '{print $1}')
      default=$(sed -n 1p $s)
      chmod +w $s && eval "echo \$$1" >$s && sleep 1 || :
      if { [ $1 = off ] && is_charging; } || { [ $1 = on ] && ! is_charging; }; then
        echo $default >$s && sleep 1 || :
      else
        break
      fi
    fi
  done <<SWITCHES
$(grep -Ev '#|^$' $modPath/switches.txt)
SWITCHES
}


# run the actual thing
main
